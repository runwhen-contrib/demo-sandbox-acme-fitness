---
apiVersion: v1
kind: Service
metadata:
  name: loadgenerator
  labels:
    app: acmefit
    service: loadgenerator
spec:
  ports:
    - name: http-loadgenerator
      protocol: TCP
      port: 8089
  selector:
    app: acmefit
    service: loadgenerator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  labels:
    app: acmefit
    service: loadgenerator
spec:
  selector:
    matchLabels:
      app: acmefit
      service: loadgenerator
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: acmefit
        service: loadgenerator
    spec:
      containers:
        - image: locustio/locust:latest
          imagePullPolicy: "Always"
          name: loadgenerator
          env: []
          ports:
            - containerPort: 8089
              name: loadgenerator
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          # command: ["/bin/sh"]
          # args: ["-c", "sleep 5000"]
          command:
           - "locust"
          args: 
           - "-f"
           - "/data/locustfile.py"
           - "--headless"
           - "-u"
           - "100"
           - "-r" 
           - "5"
          #  - "--run-time"
          #  - "1h"
           - "--host=http://acme-fitness.sandbox.runwhen.com"
          volumeMounts:
            - mountPath: "/data"
              name: "acmefit-loadgenerator-data"
      volumes:
        - name: acmefit-loadgenerator-data
          configMap:
            name: locustfile
            defaultMode: 0777
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locustfile
data:
  locustfile.py: |
    # This program will generate traffic for ACME Fitness Shop App. It simulates both Authenticated and Guest user scenarios. You can run this program either from Command line or from
    # the web based UI. Refer to the "locust" documentation for further information. 
    from time import sleep
    from locust import HttpUser, task, SequentialTaskSet, between
    import random
    import logging

    # List of users (pre-loaded into ACME Fitness shop)
    users = ["eric", "phoebe", "dwight", "han", "elaine", "walter"]

    # GuestUserBrowsing simulates traffic for a Guest User (Not logged in)
    class UserBrowsing(SequentialTaskSet):
        def on_start(self):
            self.getProducts()
        def listCatalogItems(self):
            products = []
            response = self.client.get("/products")
            if response.ok:
                items = response.json()["data"]
                for item in items:
                    products.append(item["id"])
            return products
        def getProductDetails(self, id):
            """Get details of a specific product"""
            details = {}
            response = self.client.get("/products/"+id)
            if response.ok:
                details = response.json()["data"]
                logging.debug("getProductDetails: " + str(details))
            return details
        def getProductImages(self,id):
            """Gets all three image URLs for a product"""
            details = self.getProductDetails(id)
            if details:
                for x in range(1, 4):
                    self.client.get(details["imageUrl"+str(x)])
        def getProductName(self, id):
            name = ""
            details = self.getProductDetails(id)
            if details:
                name = details["name"]
            logging.debug("NAME: "+name+ " for id: "+id)
            return name

        @task
        def getProducts(self):
            logging.debug("User - Get Products")
            self.client.get("/products")
        @task(2)
        def getProduct(self):
            """Get details of a specific product"""
            logging.debug("User - Get a product")
            products = self.listCatalogItems()
            id = random.choice(products)
            response = self.client.get("/products/"+ id)
            if response.ok:
                product = response.json()
                logging.debug("Product info - " +  str(product))
        @task
        def getImages(self):
            """Get images of a random product"""
            logging.debug("User - Get images of random product")
            products = self.listCatalogItems()
            id = random.choice(products)
            self.getProductImages(id)
        @task(2)
        def index(self):
            self.client.get("/")

    # AuthUserBrowsing simulates traffic for Authenticated Users (Logged in)
    class AuthUserBrowsing(UserBrowsing):
        """
        AuthUserBrowsing extends the base UserBrowsing class as an authenticated user 
        interacting with the cart and making orders
        """
        Order_Info = { "userid":"8888",
                    "firstname":"Eric",
                    "lastname": "Cartman",
                    "address":{
                        "street":"20 Riding Lane Av",
                        "city":"San Francisco",
                        "zip":"10201",
                        "state": "CA",
                        "country":"USA"},
                    "email":"jblaze@marvel.com",
                    "delivery":"UPS/FEDEX",
                    "card":{
                        "type":"amex/visa/mastercard/bahubali",
                        "number":"349834797981", 
                        "expMonth":"12",
                        "expYear": "2022",
                        "ccv":"123"
                    },
                    "cart":[
                        {"id":"1234", "description":"redpants", "quantity":"1", "price":"4"},
                        {"id":"5678", "description":"bluepants", "quantity":"1", "price":"4"}
                    ],
                    "total":"100"}

        def on_start(self):
            self.login()

        def login(self):
            """Login a random user"""
            user = random.choice(users)
            logging.warning("Auth User - Login user " + user)
            response = self.client.post("/login/", json={"username": "walter", "password": "vmware1!"})
            if response.ok:
                body = response.json()
                # Safely access the 'token' key, considering it might not be present
                token = body.get("token")
                if token:
                    self.user.token = token  # Assuming you meant to store the token here
                else:
                    logging.warning("Token not found in login response")
                    # Handle cases where token is missing - perhaps by setting a flag or retrying login
            else:
                logging.warning(f"Login failed for user {user}, status code {response.status_code}")

        @task
        def checkout(self):
            if not self.user.userid:
                logging.warning("Not logged in, skipping 'Add to Checkout'")
                return
            userCart = self.client.get("/cart/items/" + self.user.userid).json()
            order = self.client.post("/order/add/"+ self.user.userid, json=self.Order_Info)
    class UserBehavior(SequentialTaskSet):
        tasks = [AuthUserBrowsing]
    class WebSiteUser(HttpUser):
        sleep(3)  # Sleep on start of a user incase the target app isn't completely accessible yet.
        tasks = [UserBehavior]
        userid = ""
        wait_time = between(0.25, 0.5)


    
